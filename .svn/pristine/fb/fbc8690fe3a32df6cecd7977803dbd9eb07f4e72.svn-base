package com.xweisoft.wx.family.ui;

import java.util.Map;

import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.text.TextUtils;
import android.util.SparseArray;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.xweisoft.wx.family.R;
import com.xweisoft.wx.family.WXApplication;
import com.xweisoft.wx.family.logic.global.GlobalConstant;
import com.xweisoft.wx.family.logic.global.GlobalVariable;
import com.xweisoft.wx.family.logic.global.HttpAddressProperties;
import com.xweisoft.wx.family.logic.model.ChildrenItem;
import com.xweisoft.wx.family.logic.model.UserItem;
import com.xweisoft.wx.family.logic.model.response.ChooseChildrenResp;
import com.xweisoft.wx.family.logic.model.response.ContactResp;
import com.xweisoft.wx.family.logic.model.response.LoginResp;
import com.xweisoft.wx.family.mina.service.NotificationService;
import com.xweisoft.wx.family.service.database.ContactsDBHelper;
import com.xweisoft.wx.family.ui.contact.ContactsFragmet;
import com.xweisoft.wx.family.ui.grade.GradeFragment;
import com.xweisoft.wx.family.ui.message.MessageFragment;
import com.xweisoft.wx.family.ui.pc.ChooseChildrenActivity;
import com.xweisoft.wx.family.ui.pc.LoginActivity;
import com.xweisoft.wx.family.ui.pc.PersonCenterFragment;
import com.xweisoft.wx.family.util.HttpRequestUtil;
import com.xweisoft.wx.family.util.ListUtil;
import com.xweisoft.wx.family.util.LoginUtil;
import com.xweisoft.wx.family.util.SecurityUtil;
import com.xweisoft.wx.family.util.SharedPreferencesUtil;
import com.xweisoft.wx.family.widget.CommonDialog;
import com.xweisoft.wx.family.widget.CommonDialog.OnButtonClickListener;
import com.xweisoft.wx.family.widget.NetHandler;

public class WXMainFragmentActivity extends BaseActivity implements
        OnClickListener
{
    /**
     * 上下文
     */
    private Context mContext;
    
    /**
     * 存放所有的Fragment页面
     */
    private SparseArray<Fragment> navigateMap = new SparseArray<Fragment>();
    
    private FragmentManager mFragmentManager;
    
    private CommonDialog mCommonDialog;
    
    private KickoutBroadcastReceiver mBroadcastReceiver;
    
    private String phone;
    
    private String password;
    
    private ChildrenItem childrenItem;
    
    private ImageView mUnreadImage;
    
    /**
     * 登录Handler
     */
    private NetHandler loginHandler = new NetHandler(false)
    {
        
        @Override
        public void onSuccess(String errMsg, Message msg)
        {
            LoginResp resp = null;
            if (null != msg.obj && msg.obj instanceof LoginResp)
            {
                resp = (LoginResp) msg.obj;
                UserItem item = new UserItem();
                item.phone = phone;
                item.password = password;
                item.parentSex = resp.parentSex;
                item.userId = resp.userId;
                item.children = resp.children;
                LoginUtil.saveLoginInfo(mContext, item);
                Gson gson = new GsonBuilder().disableHtmlEscaping().create();
                String cookieStr = gson.toJson(WXApplication.getInstance().cookieList);
                SharedPreferencesUtil.saveSharedPreferences(mContext,
                        SharedPreferencesUtil.SP_KEY_LOGIN_COOKIE,
                        cookieStr);
                if (ListUtil.isEmpty(item.children))
                {
                    showToast("无法连接值服务器，请稍后再试");
                    finish();
                }
                else
                {
                    String childrenId = SharedPreferencesUtil.getSharedPreferences(mContext,
                            GlobalConstant.UserInfoPreference.CHILDREN,
                            "");
                    if (TextUtils.isEmpty(childrenId))
                    {
                        startActivity(new Intent(mContext,
                                ChooseChildrenActivity.class));
                        finish();
                    }
                    else
                    {
                        boolean login = false;
                        for (ChildrenItem children : item.children)
                        {
                            if (null != children
                                    && childrenId.equals(children.studentId))
                            {
                                login = true;
                                childrenItem = children;
                            }
                        }
                        if (login)
                        {
                            if (null != childrenItem)
                            {
                                Map<String, String> param = HttpRequestUtil.getCommonParams("");
                                param.put("studentId", childrenItem.studentId);
                                HttpRequestUtil.sendHttpPostCommonRequest(mContext,
                                        HttpAddressProperties.CHOOSE_CHILDREN,
                                        param,
                                        ChooseChildrenResp.class,
                                        handler);
                            }
                            else
                            {
                                startActivity(new Intent(mContext,
                                        ChooseChildrenActivity.class));
                                finish();
                            }
                        }
                        else
                        {
                            startActivity(new Intent(mContext,
                                    ChooseChildrenActivity.class));
                            finish();
                        }
                    }
                    
                }
            }
        }
        
        @Override
        public void onFailed(String errCode, String errMsg, Message msg)
        {
            startActivity(new Intent(mContext, LoginActivity.class));
            finish();
        }
        
        @Override
        public void netTimeout()
        {
            super.netTimeout();
            startActivity(new Intent(mContext, LoginActivity.class));
            finish();
        }
        
        @Override
        public void networkErr()
        {
            super.networkErr();
            startActivity(new Intent(mContext, LoginActivity.class));
            finish();
        }
        
        @Override
        public void otherErr()
        {
            super.otherErr();
            startActivity(new Intent(mContext, LoginActivity.class));
            finish();
        }
        
    };
    
    private Handler handler = new NetHandler(false)
    {
        
        @Override
        public void onResponse()
        {
            super.onResponse();
        }
        
        @Override
        public void onSuccess(String errMsg, Message msg)
        {
            ChooseChildrenResp resp = null;
            if (null != msg.obj && msg.obj instanceof ChooseChildrenResp)
            {
                resp = (ChooseChildrenResp) msg.obj;
                if (null != childrenItem)
                {
                    if (null != WXApplication.getInstance().loginUserItem)
                    {
                        childrenItem.classinfoId = resp.classinfoId;
                        childrenItem.classinfoName = resp.classinfoName;
                        WXApplication.getInstance().groupId = resp.groupId;
                        WXApplication.getInstance().selectedItem = childrenItem;
                    }
                    SharedPreferencesUtil.saveSharedPreferences(mContext,
                            GlobalConstant.UserInfoPreference.CHILDREN,
                            childrenItem.studentId);
                    WXApplication.getInstance().selectStudentId = childrenItem.studentId;
                    SharedPreferencesUtil.saveSharedPreferences(mContext,
                            GlobalConstant.UserInfoPreference.CLASSINFOID,
                            childrenItem.classinfoId);
                }
                startMinaService();
            }
        }
        
        @Override
        public void onFailed(String errCode, String errMsg, Message msg)
        {
            startActivity(new Intent(mContext, ChooseChildrenActivity.class));
            finish();
        }
        
        @Override
        public void netTimeout()
        {
            super.netTimeout();
            startActivity(new Intent(mContext, ChooseChildrenActivity.class));
            finish();
        }
        
        @Override
        public void networkErr()
        {
            super.networkErr();
            startActivity(new Intent(mContext, ChooseChildrenActivity.class));
            finish();
        }
        
        @Override
        public void otherErr()
        {
            super.otherErr();
            startActivity(new Intent(mContext, ChooseChildrenActivity.class));
            finish();
        }
    };
    
    private class KickoutBroadcastReceiver extends BroadcastReceiver
    {
        
        @Override
        public void onReceive(Context context, Intent intent)
        {
            if (null != mCommonDialog && mCommonDialog.isShowing())
            {
                return;
            }
            mCommonDialog = new CommonDialog(GlobalVariable.currentActivity,
                    "提示", "您的帐号已在其他设备上登录，如非您本人操作请修改密码以防止帐号信息泄漏", "退出", "重新登录",
                    new OnButtonClickListener()
                    {
                        
                        @Override
                        public void onConfirmClick()
                        {
                            phone = SharedPreferencesUtil.getSharedPreferences(mContext,
                                    GlobalConstant.UserInfoPreference.TELPHONE,
                                    "");
                            password = SharedPreferencesUtil.getSharedPreferences(mContext,
                                    GlobalConstant.UserInfoPreference.PASSWORD,
                                    "");
                            if (!TextUtils.isEmpty(phone)
                                    && !TextUtils.isEmpty(password))
                            {
                                Map<String, String> reqMap = HttpRequestUtil.getCommonParams("");
                                reqMap.put("phone", phone);
                                reqMap.put("password",
                                        SecurityUtil.MD5(password));
                                HttpRequestUtil.sendHttpPostCommonRequest(mContext,
                                        HttpAddressProperties.LOGIN_URL,
                                        reqMap,
                                        LoginResp.class,
                                        loginHandler);
                            }
                            else
                            {
                                Intent intent = new Intent(mContext,
                                        LoginActivity.class);
                                startActivity(intent);
                            }
                        }
                        
                        @Override
                        public void onCancelClick()
                        {
                            if (null != WXApplication.getInstance()
                                    .getMinaManager())
                            {
                                WXApplication.getInstance()
                                        .getMinaManager()
                                        .disconnect();
                            }
                            LoginUtil.logout((Activity) mContext);
                        }
                    });
            mCommonDialog.setTextGravity(CommonDialog.GRAVITY_DEFAULT,
                    Gravity.LEFT);
            mCommonDialog.cancelBackKey();
            mCommonDialog.showDialog();
        }
    };
    
    @Override
    public void onCreate(Bundle savedInstanceState)
    {
        super.onCreate(savedInstanceState);
        mContext = this;
        setContentViews();
        getBundle();
        initViews();
        startMinaService();
        mBroadcastReceiver = new KickoutBroadcastReceiver();
        registerReceiver(mBroadcastReceiver, new IntentFilter(
                "com.xweisoft.wx.family.kickout.broadcast"));
    }
    
    /**
     * 设置布局文件
     * <一句话功能简述>
     * <功能详细描述> [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    private void setContentViews()
    {
        mFragmentManager = getSupportFragmentManager();
        // 添加导航内容
        setContentView(R.layout.wx_main_fragment_activity);
        navigateMap.clear();
        mapNaviToFragment(R.id.main_navi_message, new MessageFragment());
        mapNaviToFragment(R.id.main_navi_contacts, new ContactsFragmet());
        mapNaviToFragment(R.id.main_navi_score, new GradeFragment());
        mapNaviToFragment(R.id.main_navi_person, new PersonCenterFragment());
        // 设置首页默认显示
        replaceFragment(R.id.main_navi_message);
    }
    
    /**
     * 初始化map
     * <一句话功能简述>
     * <功能详细描述>
     * @param id
     * @param fragment [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    private void mapNaviToFragment(int id, Fragment fragment)
    {
        View view = findViewById(id);
        view.setOnClickListener(this);
        view.setSelected(false);
        navigateMap.put(id, fragment);
    }
    
    /**
     * 执行内容切换
     * <一句话功能简述>
     * <功能详细描述>
     * @param fm
     * @param id [参数说明]
     * 
     * @return void [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    private void replaceFragment(int id)
    {
        String tag = String.valueOf(id);
        FragmentTransaction trans = mFragmentManager.beginTransaction();
        // 先隐藏掉所有的Fragment，以防止有多个Fragment显示在界面上的情况
        hideFragments(trans);
        
        if (null == mFragmentManager.findFragmentByTag(tag))
        {
            trans.add(R.id.content_frame, navigateMap.get(id), tag);
        }
        else
        {
            trans.show(mFragmentManager.findFragmentByTag(tag));
        }
        trans.commit();
        
        // 重置导航选中状态
        for (int i = 0, size = navigateMap.size(); i < size; i++)
        {
            int curId = navigateMap.keyAt(i);
            if (curId == id)
            {
                findViewById(id).setSelected(true);
            }
            else
            {
                findViewById(curId).setSelected(false);
            }
        }
    }
    
    /**
     * 将所有的Fragment都置为隐藏状态。
     * 
     * @param transaction
     *            用于对Fragment执行操作的事务
     */
    private void hideFragments(FragmentTransaction transaction)
    {
        if (null != mFragmentManager.getFragments())
        {
            for (int i = 0, size = mFragmentManager.getFragments().size(); i < size; i++)
            {
                if (mFragmentManager.getFragments().get(i) != null)
                {
                    transaction.hide(mFragmentManager.getFragments().get(i));
                }
            }
        }
    }
    
    @Override
    public void onClick(View v)
    {
        if (clickSwitchContent(v))
        {
            return;
        }
    }
    
    /**
     * 点击后，切换内容
     * <一句话功能简述>
     * <功能详细描述>
     * @param view
     * @return [参数说明]
     * 
     * @return boolean [返回类型说明]
     * @exception throws [违例类型] [违例说明]
     * @see [类、类#方法、类#成员]
     */
    private boolean clickSwitchContent(View view)
    {
        int id = view.getId();
        if (navigateMap.indexOfKey(id) < 0)
        {
            // 点击非导航view
            return false;
        }
        if (!view.isSelected())
        {
            // 当前非选中状态：需切换到新内容
            replaceFragment(id);
        }
        return true;
        
    }
    
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event)
    {
        ImageLoader.getInstance().clearMemoryCache();
        if (KeyEvent.KEYCODE_BACK == keyCode)
        {
            ImageLoader.getInstance().clearMemoryCache();
            //            moveTaskToBack(true);
            finish();
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }
    
    public void startMinaService()
    {
        if (null == WXApplication.getInstance().minaManager)
        {
            Intent intent = new Intent();
            intent.setAction(NotificationService.SERVICE_NAME);
            intent.setPackage("com.xweisoft.wx.family");
            startService(intent);
        }
        else
        {
            WXApplication.getInstance().minaManager.setNeedConnect(true);
            WXApplication.getInstance().minaManager.connect();
        }
    }
    
    @Override
    protected void onDestroy()
    {
        super.onDestroy();
        unregisterReceiver(mBroadcastReceiver);
    }
    
    @Override
    public void initViews()
    {
        mUnreadImage = (ImageView) findViewById(R.id.main_navi_message_unread);
    }
    
    @Override
    public void bindListener()
    {
        
    }
    
    @Override
    public int getActivityLayout()
    {
        return 0;
    }
    
    public void setUnreadImageVisibility(int visibility)
    {
        mUnreadImage.setVisibility(visibility);
    }
    
    private void getBundle()
    {
        boolean flag = getIntent().getBooleanExtra("false", true);
        if (flag)
        {
            Map<String, String> params = HttpRequestUtil.getCommonParams(HttpAddressProperties.CLASS_CONTACTS);
            HttpRequestUtil.sendHttpPostCommonRequest(mContext,
                    HttpAddressProperties.SERVICE_URL,
                    params,
                    ContactResp.class,
                    contactHandler);
        }
    }
    
    /**
     * 通讯录处理
     */
    private Handler contactHandler = new NetHandler(false)
    {
        
        @Override
        public void onSuccess(String errMsg, Message msg)
        {
            ContactResp resp = null;
            if (null != msg.obj && msg.obj instanceof ContactResp)
            {
                resp = (ContactResp) msg.obj;
                ContactsDBHelper helper = new ContactsDBHelper(mContext,
                        LoginUtil.getUserId(mContext));
                if (null != helper)
                {
                    String classinfoId = LoginUtil.getClassinfoId(mContext);
                    if (!ListUtil.isEmpty(resp.teacherContacts)
                            || !ListUtil.isEmpty(resp.parentContacts))
                    {
                        helper.deleteContacts(classinfoId);
                    }
                    if (!ListUtil.isEmpty(resp.teacherContacts))
                    {
                        helper.insertList(resp.teacherContacts,
                                "1",
                                classinfoId);
                    }
                    if (!ListUtil.isEmpty(resp.parentContacts))
                    {
                        helper.insertList(resp.parentContacts, "2", classinfoId);
                    }
                }
            }
        }
        
        @Override
        public void onFailed(String errCode, String errMsg, Message msg)
        {
            
        }
    };
}
